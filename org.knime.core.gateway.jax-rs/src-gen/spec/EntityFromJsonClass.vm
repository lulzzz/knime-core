/*
 * ------------------------------------------------------------------------
 *
 *  Copyright by KNIME GmbH, Konstanz, Germany
 *  Website: http://www.knime.org; Email: contact@knime.org
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License, Version 3, as
 *  published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, see <http://www.gnu.org/licenses>.
 *
 *  Additional permission under GNU GPL version 3 section 7:
 *
 *  KNIME interoperates with ECLIPSE solely via ECLIPSE's plug-in APIs.
 *  Hence, KNIME and ECLIPSE are both independent programs and are not
 *  derived from each other. Should, however, the interpretation of the
 *  GNU GPL Version 3 ("License") under any applicable laws result in
 *  KNIME and ECLIPSE being a combined program, KNIME GMBH herewith grants
 *  you the additional permission to use and propagate KNIME together with
 *  ECLIPSE with only the license terms in place for ECLIPSE applying to
 *  ECLIPSE and the GNU GPL Version 3 applying for KNIME, provided the
 *  license terms of ECLIPSE themselves allow for the respective use and
 *  propagation of ECLIPSE together with KNIME.
 *
 *  Additional permission relating to nodes for KNIME that extend the Node
 *  Extension (and in particular that are based on subclasses of NodeModel,
 *  NodeDialog, and NodeView) and that only interoperate with KNIME through
 *  standard APIs ("Nodes"):
 *  Nodes are deemed to be separate and independent programs and to not be
 *  covered works.  Notwithstanding anything to the contrary in the
 *  License, the License does not apply to Nodes, you are not required to
 *  license Nodes under the License, and you are granted a license to
 *  prepare and propagate Nodes, in each case even if such Nodes are
 *  propagated with or for interoperation with KNIME.  The owner of a Node
 *  may freely choose the license terms applicable to such Node, including
 *  when such Node is propagated with or for interoperation with KNIME.
 * ---------------------------------------------------------------------
 *
 */
package $package;

#foreach( $import in $imports)
import $import;
#end

#foreach( $import in $subTypesImports)
import $import;
#end

import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonSubTypes.Type;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * Implementation of the {@link ${name}} interface that can be deserialized from a json object (json-annotated constructor).
 *
 * @author Martin Horn, University of Konstanz
 */
// AUTO-GENERATED CODE; DO NOT MODIFY
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME, 
  include = JsonTypeInfo.As.PROPERTY, 
  property = "EntityType")
@JsonSubTypes({ 
  @Type(value = ${name}FromJson.class, name = "${name}")
#if($subTypes.size() > 0),
#end
#foreach($subType in $subTypes)
  @Type(value = ${subType}FromJson.class, name = "${subType}")#if( $foreach.hasNext ),
#end
#end
})
public class ${name}FromJson #if($superTypes.size()>0)extends #foreach ($superType in $superTypes)${superType}FromJson#if($foreach.hasNext),#end#end#end implements ${name} {

#foreach( $field in $fields )
	private $field.getType().toString("","FromJson") m_$field.getName();
#end

	@JsonCreator
	private ${name}FromJson(
#foreach( $field in $fields )
#if($field.getType().isOptional())
	@JsonProperty("${field.getName()}") ${field.getType().getTypeParameter(0).toString("","FromJson")} ${field.getName()}#if( $foreach.hasNext ),#end
#else
	@JsonProperty("${field.getName()}") ${field.getType().toString("","FromJson")} ${field.getName()}#if( $foreach.hasNext ),#end
#end
#end
	) {
#foreach( $field in $fields )
#if($field.getType().isOptional())
		m_$field.getName() = Optional.ofNullable($field.getName());
#else
		m_$field.getName() = $field.getName();
#end
#end
	}
	
	protected ${name}FromJson() {
		//just a dummy constructor for subclasses
	}


#foreach( $field in $fields )
	@Override
    public $field.getType().toString() get$field.getName()() {
    #if($field.getType().isPrimitive())
    	return m_${field.getName()};
    #elseif($field.getType().isList())
    	return m_${field.getName()}.stream().map(l -> (${field.getType().getTypeParameter(0).toString()}) l ).collect(Collectors.toList());
    #elseif($field.getType().isMap())
    	//TODO support non-primitive keys
    	$field.getType().toString() res = new HashMap<>();
        m_${field.getName()}.entrySet().stream().forEach(e -> res.put(e.getKey(), (${field.getType().getTypeParameter(1).toString()}) e.getValue()));
        return res;
    #elseif($field.getType().isOptional())
    	return m_${field.getName()}.map(o -> (${field.getType().getTypeParameter(0).toString()}) o);
    #else
        return (${field.getType().toString()}) m_${field.getName()};
    #end
        
    }
    
#end

}
