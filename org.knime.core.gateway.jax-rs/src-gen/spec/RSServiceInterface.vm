/*
 * ------------------------------------------------------------------------
 *
 *  Copyright by KNIME GmbH, Konstanz, Germany
 *  Website: http://www.knime.org; Email: contact@knime.org
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License, Version 3, as
 *  published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, see <http://www.gnu.org/licenses>.
 *
 *  Additional permission under GNU GPL version 3 section 7:
 *
 *  KNIME interoperates with ECLIPSE solely via ECLIPSE's plug-in APIs.
 *  Hence, KNIME and ECLIPSE are both independent programs and are not
 *  derived from each other. Should, however, the interpretation of the
 *  GNU GPL Version 3 ("License") under any applicable laws result in
 *  KNIME and ECLIPSE being a combined program, KNIME GMBH herewith grants
 *  you the additional permission to use and propagate KNIME together with
 *  ECLIPSE with only the license terms in place for ECLIPSE applying to
 *  ECLIPSE and the GNU GPL Version 3 applying for KNIME, provided the
 *  license terms of ECLIPSE themselves allow for the respective use and
 *  propagation of ECLIPSE together with KNIME.
 *
 *  Additional permission relating to nodes for KNIME that extend the Node
 *  Extension (and in particular that are based on subclasses of NodeModel,
 *  NodeDialog, and NodeView) and that only interoperate with KNIME through
 *  standard APIs ("Nodes"):
 *  Nodes are deemed to be separate and independent programs and to not be
 *  covered works.  Notwithstanding anything to the contrary in the
 *  License, the License does not apply to Nodes, you are not required to
 *  license Nodes under the License, and you are granted a license to
 *  prepare and propagate Nodes, in each case even if such Nodes are
 *  propagated with or for interoperation with KNIME.  The owner of a Node
 *  may freely choose the license terms applicable to such Node, including
 *  when such Node is propagated with or for interoperation with KNIME.
 * ---------------------------------------------------------------------
 *
 */
package $package;

#foreach( $import in $imports)
import $import;
#end

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;

import org.knime.core.jaxrs.IOClasses;

import java.util.List;


/**
 * JAX-RS annotated interface for {@link ${name}}.
 *
 * @author Martin Horn, University of Konstanz
 */
@Path("/${name}")
public interface RS${name} extends ${name} {

#foreach( $method in $methods )
##check whether all parameters are primitives
#set( $primitiveParams = true )
#foreach( $param in $method.getParameters() )
#if(!$param.getType().isPrimitive())
#set($primitiveParams = false)
#break
#end
#end

	@Override
#if(!$primitiveParams && $method.getOperation().getNameLowerCase() == "get")
##exception, not allowed
	PROBLEM: 'get' operation not allowed here - all parameters must be primitives
#end
#if($primitiveParams && $method.getOperation().getNameLowerCase() == "get")
	@GET
#elseif($method.getOperation().getNameLowerCase() == "update")
    @POST
#end
#set($rettype = $method.getResult().getType())
#if($rettype.isPrimitive())
    @Produces(MediaType.TEXT_PLAIN)
#elseif(!$rettype.isVoid())
	@Produces(MediaType.APPLICATION_JSON)
#if($rettype.isList())
#set($partype=${rettype.getTypeParameter(0)})
#else
#set($partype=${rettype})
#end
#if($partype.isEntity())
	@IOClasses(in=${partype.toString()}FromJson.class, out=${partype.toString()}ToJson.class)
#end
#end
#if(!$primitiveParams)
    @Consumes(MediaType.APPLICATION_JSON)
#end
    @Path("/$method.getNameWithoutOperation().toLowerCase()")
    public $rettype.toString("","") $method.getName()(
#foreach($param in $method.getParameters())
#if(${param.getType().isPrimitive()})
		@QueryParam("$param.getName()") final $param.getType().toString("","") $param.getName()#if($foreach.hasNext),#end
#else
#if($param.getType().isList())
#set($partype=${param.getType().getTypeParameter(0)})
#else
#set($partype=${param.getType()})
#end
		#if($partype.isEntity())@IOClasses(in=${partype.toString()}FromJson.class, out=${partype.toString()}ToJson.class)#end final $param.getType().toString("","") $param.getName()#if($foreach.hasNext),#end
#end
#end
);
#end

}
